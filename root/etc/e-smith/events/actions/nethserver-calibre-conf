#!/usr/bin/perl

use strict;
use warnings;

use esmith::DB::db;
use esmith::ConfigDB;
use esmith::event;
use File::Path qw(make_path);

my $event = shift || '';
my $cdb   = esmith::ConfigDB->open() || die("Can't open configuration db.");
my $caldb = esmith::DB::db->open('calibre') || die("Can't open calibre db.");

my $data_dir        = '/var/lib/nethserver/calibre';
my $libraries_dir   = $data_dir . '/libraries';
my $default_library = $libraries_dir . '/Books';
my $global_pref     = $data_dir . '/.config/calibre/global.py';
my $pattern         = qr([:"|><*?\\]|(\/|^)\.{1,2}(\/|$)); # exclusion pattern, matches ':"|><*?\', './', '../', '/..';
my $status          = $cdb->get_prop('calibre', 'status') || 'enabled';
my @libraries;


if ($event eq 'nethserver-calibre-update') {

    # create 'calibre' system user
    system("if ! getent passwd calibre >/dev/null; then useradd -r -U -s /sbin/nologin -d $data_dir -c 'Calibre User' calibre; fi");
    if ($? == 0) {warn("[INFO] User 'calibre' created.\n")};

    # create directories and set permissions
    make_path(  "$data_dir/.config/calibre", 
                "$libraries_dir", 
                "/var/log/calibre", {
        chmod => 0755,
        group => 'calibre',
        owner => 'calibre',
    }) || die("[ERROR] Failed to create calibre data paths.");
    warn("[INFO] Calibre data paths created.\n") if ($?);

    # install calibre
    if ( ! -e '/opt/calibre/calibre-server') {
        # SECURITY WARNING: about to run a script without verifying its code. Do we trust the source?
        # WARNING: what about redirections and connections problems?
        system('wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sh /dev/stdin install_dir=/opt');
        if ($? != 0) {die("[ERROR] Calibre installation failed.");}
    }

}


# stop calibre service (required to add libraries)
system('if /usr/bin/systemctl is-active --quiet calibre.service; then /usr/bin/systemctl stop calibre.service; fi');

# process libraries
my @libs = $caldb->get_all_by_prop('type' => 'library');
if (@libs) {
    foreach my $lib (@libs) {
        # get path and trim whitespace
        my $path = $lib->prop('Path');
        $path =~ s/^\s+|\s+$//;

        if ( ! $path) {
            warn("[NOTICE] '$lib->key' library path missing.\n");
            next;
        }

        # validate: use of restricted characters
        if ($path =~ m/$pattern/) {
            warn("[NOTICE] '$lib->key' library has an invalid path: '$path'.\n");
            next;
        }

        # build absoulte path (consider File::Spec)
        $path =~ s{(?=^[^/])}{$libraries_dir/};

        # check if under default libraries path
        if ($path !~ m/^$libraries_dir/) {
            if ( ! -d $path) {
                warn("[NOTICE] '$lib->key' library path does not exists: '$path'.\n");
                next;
            }
            
            # check if writable by calibre user
            # system("TERM=dumb runuser -s /bin/bash calibre -c \"/usr/bin/test -w $path\"");
            if (system("TERM=dumb runuser -s /bin/bash calibre -c \"[ -w $path ]\"") != 0) {
                warn("[NOTICE] 'calibre' system user has no write access to '$path'.\n");
                next;
            }
        }

        # create new library
        if ( ! -e $path . '/metadata.db') {
            system(qq(TERM=dumb runuser -s /bin/bash calibre -c "/usr/bin/calibredb add --empty --with-library '$path' > /dev/null"));
            if ($? != 0) {
                warn("[NOTICE] '$lib->key' library creation failed.\n");
                next;
            }
            system(qq(TERM=dumb runuser -s /bin/bash calibre -c "/usr/bin/calibredb remove --permanent 1 --with-library '$path'"));
        }

        # validated data
        if (-e $path . '/metadata.db') {
            push @libraries, $path;
        }
    }
}


# create default library
if ( ! @libraries) {
    if ( ! -e $default_library.'/metadata.db') {
        system(qq(TERM=dumb runuser -s /bin/bash calibre -c "/usr/bin/calibredb add --empty --with-library '$default_library' >/dev/null"));
        if ($? != 0) {die("[ERROR] default library creation failed.");}
        system(qq(TERM=dumb runuser -s /bin/bash calibre -c "/usr/bin/calibredb remove --permanent 1 --with-library '$default_library'"));
    }
    $caldb->set_prop('default', 'library', 'Path', $default_library);

    # modify global.py preferences file (TODO: consider removing this, as no real effect detected on server side)
    if (-f $global_pref) {
        local($^I, @ARGV) = ('.bak', $global_pref);
        while (<>) {
          # s/^(library_path = )(.*)$/'${1}$default_library'/;
          # s/^(database_path = )(.*)$/'${1}$default_library\/metadata.db'/;
          s{(?<=^library_path = )(?:.*)}{'$default_library'};
          s{(?<=^database_path = )(?:.*)}{'$default_library/metadata.db'};

          print;
          close ARGV if eof;
        }
    }
}

# force calibre.service template expansion (otherwise template expansion happens before library creation !!!)
# system("/sbin/e-smith/expand-template /usr/lib/systemd/system/calibre.service");
# if ($? == 0) {
#    warn("[INFO] expand-template calibre.service succeded.\n");
# }
# else {
#    warn("[NOTICE] expand-template calibre.service failed.\n");
# }


# create calibre db users

# enable/start service
#if ($status eq 'enabled') {
#   system('systemctl daemon-reload');
#   system('systemctl enable calibre --now');
#}