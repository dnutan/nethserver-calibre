#!/usr/bin/perl

#
# Copyright (C) 2017 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;

use esmith::ConfigDB;
use esmith::event;
use File::Path qw(make_path);

my $event = shift || '';
my $db = esmith::ConfigDB->open() || die ("Can't open configuration db");
my $dataPath = '/var/lib/nethserver/calibre'; # without trailing slash
my $defaultLibrary = $dataPath.'/libraries/Books';
my $globalPref = $dataPath.'/.config/calibre/global.py';
my @libraries = split(/;/, ($db->get_prop('calibre', 'Libraries') || ''));
my $status = $db->get_prop('calibre', 'status') || 'disabled';


if ($event eq 'nethserver-calibre-update') {
	# create 'calibre' system user
	system("if ! getent passwd calibre >/dev/null; then useradd -r -U -s /sbin/nologin -d $dataPath -c 'Calibre User' calibre;fi");

	# Create directories and set permissions
	make_path("$dataPath/.config/calibre", "$dataPath/libraries", "/var/log/calibre" {
	    chmod => 0755,
	    group => 'calibre',
	    owner => 'calibre',
	});
	
	# install calibre
	if (! -d '/opt/calibre') {
		system('sudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin install_dir=/opt');
	}
}

# create default library
if (! @libraries) {

	if (! -e $defaultLibrary.'/metadata.db') {
		system('/usr/bin/systemctl stop calibre-server');
		# NOTE: if a bug is found by removing book with id #1, create empty book with --identifier (or with any other identificable option)
		system('TERM=dumb runuser -s /bin/bash calibre -c "/usr/bin/calibredb add --empty --with-library '.$defaultLibrary.'"');
		system('TERM=dumb runuser -s /bin/bash calibre -c "/usr/bin/calibredb remove 1 --with-library '.$defaultLibrary.'"');
	}
	$db->set_prop('calibre', 'Libraries', $defaultLibrary);

	# modify global.py preferences file
	if (-f $globalPref) {
		local($^I, $ARGV) = ('.bak', $globalPref);
		while (<>) {
		  s/^(?:library_path = )(.*)$/\'$defaultLibrary\'/;
		  s/^(?:database_path = )(.*)$/\'$defaultLibrary\/metadata\.db\'/;
		  print;
		  close ARGV if eof;
		}
	}
}

# create calibre db users

# enable/start service
if ($status eq 'enabled') {
	system('systemctl daemon-reload');
	system('systemctl enable calibre-server --now');
}
